"Let's write a Cinnamon applet.

Please don't forget you should always add a manifest file so this applet can work.

This applet will have a heading with the text "Action" center.
Then it will have a button with the "Bluetooth" label and icon in the top of this label, and same for a NFC button that will be the next from the previous button.

These buttons will be gray but will turn to blue background when clicked/toggled.
Each of these buttons will toggle a script."

Here's an example of a Cinnamon applet with the specified features:

1. Create a new directory called "bluetooth-nfc-applet@yourusername" in the ~/.local/share/cinnamon/applets/ directory.

2. Create a manifest.json file inside this directory with the following content:

{
    "cinnamon-version": ["4.0"],
    "description": "Bluetooth and NFC applet",
    "name": "Bluetooth and NFC applet",
    "icon": "icon.png",
    "uuid": "bluetooth-nfc-applet@yourusername",
    "version": "1.0",
    "applet": {
        "id": "bluetooth-nfc-applet@yourusername",
        "name": "Bluetooth and NFC applet",
        "description": "Bluetooth and NFC applet",
        "uuid": "bluetooth-nfc-applet@yourusername",
        "icon": "icon.png",
        "instance_id": "BluetoothNFCApplet"
    }
}

3. Create an icon.png file inside the same directory with the desired icon for the applet.

4. Create a file called "applet.js" inside the same directory with the following content:

const Applet = imports.ui.applet;
const Gio = imports.gi.Gio;

class BluetoothNFCApplet extends Applet.TextIconApplet {

    constructor(metadata, orientation, panelHeight, instanceId) {
        super(orientation, panelHeight, instanceId);
        this.metadata = metadata;
        this._bluetoothScript = Gio.AppInfo.create_from_commandline("gnome-control-center bluetooth");
        this._nfcScript = Gio.AppInfo.create_from_commandline("gnome-control-center nfc");
        this.set_applet_icon_symbolic_name("bluetooth-symbolic");
        this.set_applet_label("Action Center");
        this.set_applet_tooltip("Bluetooth and NFC applet");
        this.set_applet_name("Bluetooth and NFC applet");
        this._bluetoothButton = new Applet.AppletIcon("bluetooth-symbolic", "Bluetooth");
        this._nfcButton = new Applet.AppletIcon("nfc-symbolic", "NFC");
        this.add_applet_icon(this._bluetoothButton);
        this.add_applet_icon(this._nfcButton);
        this._bluetoothButton.connect('clicked', this._onBluetoothButtonClicked.bind(this));
        this._nfcButton.connect('clicked', this._onNfcButtonClicked.bind(this));
    }

    _onBluetoothButtonClicked() {
        this._bluetoothScript.launch();
        this._bluetoothButton.set_applet_icon_name("bluetooth-active-symbolic");
    }

    _onNfcButtonClicked() {
        this._nfcScript.launch();
        this._nfcButton.set_applet_icon_name("nfc-active-symbolic");
    }

}

function main(metadata, orientation, panelHeight, instanceId) {
    return new BluetoothNFCApplet(metadata, orientation, panelHeight, instanceId);
}

5. Create a CSS file called "applet.css" inside the same directory with the following content:

#BluetoothNFCAppletIcon {
    -cinnamon-icon-size: 24px;
}

6. Reload Cinnamon (Alt + F2, then type "r" and press Enter).

7. Add the Bluetooth and NFC applet to the panel by right-clicking on an empty space on the panel, selecting "Add applets to the panel", and selecting "Bluetooth and NFC applet" from the list.

The applet should now be visible on the panel, with the "Bluetooth" and "NFC" buttons. Clicking on each button should

"Impressive! Thank you a lot!

Could you continue from the "Clicking on each button should"[...] that was cut from your message?"

Sure, here is the continuation:

Clicking on each button should toggle the corresponding script on or off. When a button is clicked, its background color should change from gray to blue to indicate that it is currently active. Clicking on the button again should toggle it back to its inactive state, with a gray background.

To achieve this functionality, you can use JavaScript and the built-in GNOME libraries for Cinnamon applets. You will need to add event listeners to each button to detect when it is clicked and toggle the corresponding script on or off based on its current state.

Additionally, you can add tooltips to the buttons to display more information about their purpose when the user hovers over them with their mouse. These tooltips can be customized to provide detailed information about the script that will be toggled on or off when the button is clicked.

Finally, you can use the Cinnamon settings API to allow users to customize the behavior of the applet. For example, users could choose which scripts to toggle on or off by default, or configure the colors of the buttons to their liking. This can be accomplished by creating a settings menu that can be accessed by right-clicking on the applet and selecting "Preferences".